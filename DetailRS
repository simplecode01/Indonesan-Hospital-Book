@AndroidEntryPoint
class DetailRSFragment : Fragment(R.layout.fragment_detail_r_s) {

    private val binding: FragmentDetailRSBinding by viewBinding()
    private val viewModelSave: MainViewModel by activityViewModels()
    private val viewModelMainHilt: MainHiltViewModel by viewModels()
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val hospitalId = viewModelSave.hospitalID
        val hospitalUpdate = viewModelSave.lastUpdate
        val hospitalName = viewModelSave.hospitalName
        val toolbarActivity = requireActivity().findViewById<Toolbar?>(R.id.toolbar)
        var type = ""
        getDetailHospitals(hospitalId, type, hospitalUpdate)
        getHospitalMaps(hospitalId, hospitalName)
        binding.btnOpenMaps.setOnClickListener {
            openGmap(hospitalId)
        }
        toolbarActivity.title = hospitalName

    }
    private fun getDetailHospitals(hospitalID: String, typeID: String, hospitalUpdate: String){
        viewModelMainHilt.getDetailRumahSakit(hospitalID, typeID).observe(viewLifecycleOwner){resource ->
            when (resource.status) {
                Status.LOADING -> {
                    binding.pvLoading.isVisible = true
                    binding.tvWaitLoading.isVisible = true
                    binding.cvHospitalInfo.isVisible = false
                    binding.cvBedInfo.isVisible = false
                    binding.btnOpenMaps.isVisible = false
                    binding.ivMenu.isVisible = false
                }
                Status.SUCCESS -> {
                    binding.pvLoading.isVisible = false
                    binding.tvWaitLoading.isVisible = false
                    binding.cvHospitalInfo.isVisible = true
                    binding.cvBedInfo.isVisible = true
                    binding.btnOpenMaps.isVisible = true
                    binding.ivMenu.isVisible = true
                    resource.data?.let { infoRS ->
                        val detailRS = infoRS.data
                        binding.rsPhone.text = detailRS.phone
                        binding.rsAdress.text = detailRS.address
                        binding.rsLastUpdate.text = hospitalUpdate
                        binding.btnCall.setOnClickListener {
                            val intent = Intent(Intent.ACTION_DIAL)
                            intent.data = Uri.parse("tel:${detailRS.phone}")
                            startActivity(intent)
                        }
                        val detailBed = infoRS.data.bedDetail
                        val adapter = ListDetailKasurHospitalsAdapter(detailBed)
                        if (detailBed == null) {

                        } else {
                            binding.rvBedInfo.adapter = adapter
                        }
                        binding.ivMenu.setOnClickListener {
                            val content =
                                "Hospital Name : ${detailRS.name} \n\nHospital Adress : ${detailRS.address} \n\nHospital Phone Number : ${detailRS.phone}"
                            val view = layoutInflater.inflate(R.layout.bottom_sheet_dialog, null)
                            val dialog = BottomSheetDialog(requireContext())
                            dialog.setCancelable(true)
                            dialog.setContentView(view)
                            dialog.show()
                            val btnClose = view.findViewById<ImageView>(R.id.close_bottom)
                            val btnCopy = view.findViewById<LinearLayout>(R.id.copyInfo)
                            val btnShare = view.findViewById<LinearLayout>(R.id.shareInfo)
                            val btnFav = view.findViewById<LinearLayout>(R.id.favorite)
                            btnClose.setOnClickListener {
                                dialog.dismiss()
                            }
                            btnCopy.setOnClickListener {
                                val clipboard: ClipboardManager =
                                    requireContext().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                                val clip = ClipData.newPlainText("copy_info", content)
                                clipboard.setPrimaryClip(clip)
                                dialog.dismiss()
                                dialog.dismiss()

                            }
                            btnShare.setOnClickListener {
                                ShareCompat.IntentBuilder(requireContext())
                                    .setText(content)
                                    .setType("text/plain")
                                    .startChooser()
                                dialog.dismiss()
                            }
                            btnFav.setOnClickListener {
                                val dataRS = detailRS
                                bookmark(dataRS.id, dataRS.name, dataRS.address, dataRS.phone)
                                dialog.dismiss()
                            }
                        }
                    }
                }
                Status.ERROR -> {
                    Toast.makeText(
                        requireContext(),
                        "ERROR PANTEK, REASON : ${resource.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }
    }
    private fun getHospitalMaps(hospitalID: String, rsName: String){
        viewModelMainHilt.getMapsRumahSakit(hospitalID).observe(viewLifecycleOwner){resource ->
            when(resource.status){
                Status.LOADING ->{
                    binding.cvMaps.isVisible = false
                }
                Status.SUCCESS ->{
                    binding.cvMaps.isVisible = true
                    resource.data?.let { dataRS ->
                        val callbackMaps = OnMapReadyCallback { googleMap ->
                            val lat = dataRS.data.lat.toDouble()
                            val long = dataRS.data.long.toDouble()
                            val location = LatLng(lat, long)
                            googleMap.addMarker(MarkerOptions().position(location).title("$rsName"))
                            googleMap.moveCamera(CameraUpdateFactory.newLatLng(location))
                            googleMap.animateCamera(CameraUpdateFactory.newLatLng(location))
                            googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location, 13F))
                        }
                        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment?
                        mapFragment?.getMapAsync(callbackMaps)
                    }
                }
                Status.ERROR ->{
                    Toast.makeText(requireContext(), "ERROR PANTEK, REASON : ${resource.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    private fun openGmap(hospitalID: String){
        viewModelMainHilt.getMapsRumahSakit(hospitalID).observe(viewLifecycleOwner){resource ->
            when(resource.status){
                Status.LOADING ->{
                    Toast.makeText(requireContext(), "Please wait...", Toast.LENGTH_SHORT).show()
                }
                Status.SUCCESS ->{
                    binding.cvMaps.isVisible = true
                    resource.data?.let { dataRS ->
                        val lat = dataRS.data.lat
                        val long = dataRS.data.long
                        val link = "https://www.google.com/maps/search/?api=1&query=$lat,$long"
                        startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(link)))
                    }
                }
                Status.ERROR ->{
                    Toast.makeText(requireContext(), "ERROR, REASON : ${resource.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    private fun bookmark(hospitalID: String, hospitalName: String, hospitalAddress: String, hospitalPhone: String){
        val fav = Favorite(idMain = null, id = hospitalID, name = hospitalName, adress = hospitalAddress, nohp = hospitalPhone)
        lifecycleScope.launch {
            viewModelMainHilt.addFav(fav)
            findNavController().navigate(R.id.action_nav_detail_rs_to_nav_home)
            Toast.makeText(requireContext(), "Favorite succesfully added", Toast.LENGTH_SHORT).show()
        }
    }
}
